// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  lists List[]
  likes Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model List {
    id String @id @default(uuid())
    owner_id String
    owner User @relation(fields: [owner_id], references: [id])
    name String
    description String?
    entries Entry[]
    likes Like[]
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model Entry {
  id Int @id @default(autoincrement())
  name String
  description String?
  list_id String
  spot_id Int
  list List @relation(fields: [list_id], references: [id], onDelete: Cascade)
  spot Spot @relation(fields: [spot_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt  
}

model Spot {
  id Int @id @default(autoincrement())
  lat Float
  lon Float
  place_id String? 
  @@unique([lat,lon])
  entries Entry[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt  
}

model Like {
  id Int @id @default(autoincrement())
  user_id String
  user User @relation(fields: [user_id], references: [id])
  list_id String
  list List @relation(fields: [list_id], references: [id], onDelete: Cascade)
  @@unique([list_id,user_id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt    
}